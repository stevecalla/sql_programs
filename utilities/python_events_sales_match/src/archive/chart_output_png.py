import matplotlib.pyplot as plt
import pandas as pd

def save_match_score_histogram(events_2025, output_path):
    """Save a histogram showing the distribution of match scores."""
    plt.figure(figsize=(10, 5))
    plt.hist(
        [
            events_2025['match_score_name_only'].dropna(),
            events_2025['match_score_name_and_site'].dropna(),
            events_2025['match_score_name_and_zip'].dropna()
        ],
        bins=20,
        edgecolor='black',
        label=['Name Only', 'Name + Website', 'Name + ZipCode']
    )
    plt.axvline(80, color='red', linestyle='--', label='Typical Match Threshold (80)')
    plt.axvline(90, color='green', linestyle='--', label='Strong Match Threshold (90)')
    plt.title("Distribution of Match Scores (2025 vs 2024)")
    plt.xlabel("Match Score")
    plt.ylabel("Event Count")
    plt.grid(True, axis='y', linestyle='--', alpha=0.5)
    plt.legend()
    plt.tight_layout()
    plt.savefig(output_path)
    plt.close()

def save_bar_chart(df_summary, year, output_path, title_prefix="Monthly Event Trends for"):
    # Calculate total events for this DataFrame (for the given year)
    total_events = df_summary['event_count'].sum()
    
    # Compute monthly totals (ensuring proper calendar order)
    """Save a bar chart for the event counts per month."""
    monthly_total = df_summary.groupby('month_name')['event_count'].sum()
    order = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    monthly_total = monthly_total.reindex(order).fillna(0)

    # Create the bar chart
    fig = plt.figure(figsize=(10, 5))
    bars = plt.bar(monthly_total.index, monthly_total.values)
    for bar in bars:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width() / 2, height, int(height), ha='center', va='bottom')

    plt.title(f"{title_prefix} {year}")
    plt.ylabel("Event Count" if "Trends" in title_prefix else "Draft Event Count")
    plt.xticks(rotation=45)

    # Add annotation for the total count in the top-right of the axes
    plt.gca().annotate(
        f"Total: {int(total_events)}",
        xy=(0.95, 0.95), xycoords='axes fraction',
        ha='right', va='top', fontsize=12,
        bbox=dict(facecolor='white', edgecolor='black', boxstyle='round,pad=0.5')
    )

    plt.tight_layout()
    plt.savefig(output_path)
    plt.close()

def save_yoy_comparison_chart(pivot, title, output_path):
    """Save a Year-over-Year comparison chart using a twin axis plot."""
    fig, ax1 = plt.subplots(figsize=(12, 6))
    x = range(len(pivot))
    
    # Plot event counts for both years
    ax1.plot(x, pivot[2024], label='2024', marker='o')
    ax1.plot(x, pivot[2025], label='2025', marker='o')
    ax1.set_xticks(x)
    ax1.set_xticklabels(pivot.index, rotation=45)
    ax1.set_ylabel("Event Count")
    
    # Annotate each data point on both lines
    for i in x:
        ax1.text(i, pivot[2024].iloc[i], str(int(pivot[2024].iloc[i])), ha='center', va='bottom')
        ax1.text(i, pivot[2025].iloc[i], str(int(pivot[2025].iloc[i])), ha='center', va='bottom')

    # Add a secondary y-axis with a bar plot for the difference
    ax2 = ax1.twinx()
    bars = ax2.bar(x, pivot['difference'], alpha=0.3, color='gray', label='YoY Diff')
    for i, bar in enumerate(bars):
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width() / 2, height, str(int(height)), ha='center', va='bottom')

    # Compute overall totals for each year
    total_2024 = pivot[2024].sum()
    total_2025 = pivot[2025].sum()
    
    # Add totals annotation at the upper right-hand corner
    ax1.annotate(
        f"Total 2024: {int(total_2024)}\nTotal 2025: {int(total_2025)}",
        xy=(0.95, 0.95), xycoords='axes fraction',
        ha='right', va='top', fontsize=12,
        bbox=dict(facecolor='white', edgecolor='black', boxstyle='round,pad=0.5')
    )
    
    ax1.legend(loc='upper left')
    ax1.grid(True, axis='y', linestyle='--', alpha=0.5)
    ax2.set_ylabel("Year-over-Year Difference")
    ax2.axhline(0, color='black', linestyle='--', linewidth=0.5)
    
    # Set y-axis limits based on your data range
    min_val = min(pivot[2024].min(), pivot[2025].min(), pivot['difference'].min(), 0)
    max_val = max(pivot[2024].max(), pivot[2025].max(), pivot['difference'].max())
    ax1.set_ylim(min_val, max_val)
    ax2.set_ylim(min_val, max_val)

    plt.title(title)
    plt.tight_layout()
    plt.savefig(output_path)
    plt.close()

def save_yoy_comparison_chart_for_value(pivot_value, value_segment, output_path):
    """
    Produce a year-over-year comparison chart for a specific Value segment.
    
    Parameters:
      pivot_value : pd.DataFrame
          The pivot table that is generated by grouping by ['year', 'month', 'month_name', 'Value'],
          and pivoting such that each row contains the columns:
          'month_name', 'month_order', 2024, 2025, 'difference', and 'Value'.
      value_segment : str
          The specific Value segment for which to generate the chart.
      output_path : str
          The file path where the chart image will be saved.
    """
    # Filter the pivot table to only rows with the given value_segment
    df_seg = pivot_value[pivot_value['Value'] == value_segment].copy()

    if df_seg.empty:
        print(f"No data found for Value segment: {value_segment}")
        return
    
    # Sort by month order to keep the x-axis in calendar order
    df_seg = df_seg.sort_values('month_order')
    
    # Generate x-axis positions from the number of months available
    x = range(len(df_seg))
    
    fig, ax1 = plt.subplots(figsize=(12, 6))
    
    # Plot the 2024 and 2025 event counts as lines with markers.
    ax1.plot(x, df_seg[2024], label='2024', marker='o')
    ax1.plot(x, df_seg[2025], label='2025', marker='o')
    
    ax1.set_xticks(x)
    ax1.set_xticklabels(df_seg['month_name'], rotation=45)
    ax1.set_ylabel("Event Count")
    
    # Annotate the points for additional clarity.
    for i in x:
        ax1.text(i, df_seg[2024].iloc[i], str(int(df_seg[2024].iloc[i])), ha='center', va='bottom')
        ax1.text(i, df_seg[2025].iloc[i], str(int(df_seg[2025].iloc[i])), ha='center', va='bottom')
    
    # Add a secondary y-axis for the difference with bar plot.
    ax2 = ax1.twinx()
    bars = ax2.bar(x, df_seg['difference'], alpha=0.3, color='gray', label='YoY Diff')
    
    # Annotate the difference bars.
    for i, bar in enumerate(bars):
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width() / 2, height, str(int(height)), ha='center', va='bottom')
    
    ax1.legend(loc='upper left')
    ax1.grid(True, axis='y', linestyle='--', alpha=0.5)
    ax2.set_ylabel("Year-over-Year Difference")
    ax2.axhline(0, color='black', linestyle='--', linewidth=0.5)
    
    # Set appropriate y-axis limits from the data.
    min_val = min(df_seg[2024].min(), df_seg[2025].min(), df_seg['difference'].min(), 0)
    max_val = max(df_seg[2024].max(), df_seg[2025].max(), df_seg['difference'].max())
    ax1.set_ylim(min_val, max_val)
    ax2.set_ylim(min_val, max_val)
    
    # Compute full year totals for 2024 and 2025
    total_2024 = df_seg[2024].sum()
    total_2025 = df_seg[2025].sum()
    
    # Add annotation for the full year totals in the top-right of the chart
    ax1.annotate(
        f"Total 2024: {int(total_2024)}\nTotal 2025: {int(total_2025)}",
        xy=(0.95, 0.95), xycoords='axes fraction',
        ha='right', va='top', fontsize=12,
        bbox=dict(facecolor='white', edgecolor='black', boxstyle='round,pad=0.5')
    )
    
    plt.title(f"Year-over-Year Comparison by Month - {value_segment}")
    plt.tight_layout()
    plt.savefig(output_path)
    plt.close(fig)

def save_day_diff_histogram(april_shift, month_name, output_path):
    """Save histogram of day differences for events in the analysis month."""
    plt.figure(figsize=(10, 5))
    bins = range(-15, 16)
    counts, bins, patches = plt.hist(april_shift['day_diff'].dropna(), bins=bins, edgecolor='black', color='skyblue')
    for count, patch in zip(counts, patches):
        if count > 0:
            plt.text(patch.get_x() + patch.get_width() / 2, count, str(int(count)), ha='center', va='bottom', fontsize=9)
    plt.title(f"Event Date Shifts for {month_name} 2025 (vs. 2024)")
    plt.annotate(
        f"Positive = Event moved later in {month_name} 2025 vs {month_name} 2024\n"
        f"Negative = Event moved earlier in {month_name} 2025 vs. {month_name} 2024",
        xy=(0.98, 0.95), xycoords='axes fraction', ha='right', va='top', fontsize=9,
        bbox=dict(boxstyle="round,pad=0.4", fc="white", ec="gray", alpha=0.8)
    )
    plt.xlabel("Day Difference (2025 - 2024)")
    plt.ylabel("Event Count")
    plt.grid(axis='y', linestyle='--', alpha=0.6)
    plt.tight_layout()
    # histogram_path = f"event_output/{month_name.lower()}_2025_shift_histogram.png"
    plt.savefig(output_path)
    plt.close()
    return output_path

def save_month_shift_bar(april_shift, month_name, output_path):
    """Save a bar chart of the month shift counts."""
    month_labels = {
        1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May', 6: 'Jun',
        7: 'Jul', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'
    }
    month_shift_counts = april_shift['month_2024'].value_counts().sort_index()
    month_shift_counts.index = month_shift_counts.index.map(lambda x: month_labels.get(x, 'Unknown'))
    plt.figure(figsize=(10, 5))
    bars = plt.bar(month_shift_counts.index, month_shift_counts.values, color='coral')
    for bar in bars:
        plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), int(bar.get_height()), ha='center', va='bottom')
    plt.title(f"{month_name} 2025 Events â€” Prior Year Month")
    plt.xlabel(f"{month_name} 2024")
    plt.ylabel("Event Count")
    plt.grid(axis='y', linestyle='--', alpha=0.6)
    plt.tight_layout()
    # month_shift_path = f"event_output/{month_name.lower()}_2025_month_shift_bar.png"
    plt.savefig(output_path)
    plt.close()
    return output_path
